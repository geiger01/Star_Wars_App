{"version":3,"sources":["components/Screen.jsx","components/MovieDetails.jsx","components/MoviePreview.jsx","components/MovieList.jsx","services/storage.service.js","services/movie.service.js","pages/MovieApp.jsx","App.js","index.js"],"names":["Screen","isOpen","exitScreen","onClick","className","MovieDetails","movie","onToggleNav","title","director","producer","release_date","split","opening_crawl","MoviePreview","onSetCurrMovie","onToggleFav","favMovies","e","episode_id","MovieList","movies","isNavOpen","map","storageService","saveToStorage","key","val","localStorage","setItem","JSON","stringify","loadFromStorage","getItem","parse","removeFromStorage","removeItem","URL","MOVIE_KEY","FAV_MOVIES_KEY","movieService","getMovies","toggleFavMovie","episodeId","a","length","Promise","resolve","axios","get","res","data","results","console","log","MovieApp","useState","setMovies","currMovie","setCurrMovie","setFavMovies","setIsNavOpen","useEffect","loadMovies","stopPropagation","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fdbc4146.chunk.js","sourcesContent":["export const Screen = ({ isOpen, exitScreen }) => {\n    return (\n        <div\n            onClick={() => {\n                exitScreen(false)\n            }}\n            className={`screen ${isOpen ? \"screen-active\" : \"\"}`}\n        ></div>\n    )\n}","import React ,{useState}from 'react'\nimport { GiHamburgerMenu } from \"react-icons/gi\";\nimport { Screen } from './Screen';\n\n\nexport const MovieDetails = ({movie,onToggleNav,isOpen,exitScreen}) => {\n\n\n \n    if (!movie) return <div>Loading</div>\n    return (\n        <div className=\"movie-details\">\n            <div onClick={onToggleNav} className=\"menu-hamburger\">\n                <GiHamburgerMenu/>\n            </div>\n\n            <h1>{movie.title}</h1>\n            <h4>Director: {movie.director}</h4>\n            <h4>Producer: {movie.producer}</h4>\n            <h4>Release Date: {movie.release_date.split('-')[0]}</h4>\n            <p>{movie.opening_crawl}</p>\n        <div className=\"movie-img\"></div>\n\n        <ScreenÂ exitScreen={exitScreen} isOpen={isOpen}/>\n        </div>\n    )\n}\n","import React from 'react'\nimport { AiOutlineStar } from \"react-icons/ai\";\nimport { AiFillStar } from \"react-icons/ai\";\n\nexport const MoviePreview = ({movie,onSetCurrMovie,onToggleFav,favMovies}) => {\n    return (\n        <div onClick={()=>onSetCurrMovie(movie)} className=\"movie-preview\">\n            <h3>{movie.title} <span> ({movie.release_date.split('-')[0]})</span></h3>\n            <div onClick={(e)=>onToggleFav(e,movie.episode_id)} className=\"movie-star\">\n            {favMovies &&\n            <>\n            {favMovies[movie.episode_id]? \n                <AiFillStar /> :\n                <AiOutlineStar /> \n            }\n            </>\n            }\n            </div>\n        </div>\n    )\n}\n","import React from 'react'\nimport { MoviePreview } from './MoviePreview'\n\nexport const MovieList = ({movies,onSetCurrMovie,onToggleFav,favMovies,isNavOpen}) => {\n    return (\n        <div className={`movie-list ${isNavOpen ? \"active\" : \"\"} `}>\n            <div className=\"movie-list-title\">\n                <h2>Our Movies</h2>\n            </div>\n            {movies && movies.map((movie)=> <MoviePreview  onToggleFav={onToggleFav} movie={movie} key={movie.episode_id} onSetCurrMovie={onSetCurrMovie} favMovies={favMovies}/>)}\n        </div>\n    )\n}\n","export const storageService = {\n    saveToStorage,\n    loadFromStorage,\n    removeFromStorage\n}\n\nfunction saveToStorage(key, val) {\n    localStorage.setItem(key, JSON.stringify(val))\n}\n\nfunction loadFromStorage(key) {\n    const val = localStorage.getItem(key)\n    return JSON.parse(val)\n}\n\nfunction removeFromStorage(key) {\n    localStorage.removeItem(key);\n}","import axios from \"axios\";\nimport { storageService } from \"./storage.service\";\n\nconst URL = 'https://swapi.dev/api'\nconst MOVIE_KEY = 'movies'\nconst FAV_MOVIES_KEY = 'favourites'\n\nexport const movieService={\n    getMovies,\n    toggleFavMovie\n}\n\nasync function getMovies(){\n\n    const movies = storageService.loadFromStorage(MOVIE_KEY) || []\n    if (movies && movies.length > 0 )return Promise.resolve(movies)\n\n    try{\n        const res= await axios.get(`${URL}/films`)\n        const movies = res.data.results\n        storageService.saveToStorage(MOVIE_KEY, movies)\n        \n        return movies\n    }catch(err){\n        console.log(err);\n    }\n}\n\nfunction toggleFavMovie(episodeId){\n    \n    const favMovies = storageService.loadFromStorage(FAV_MOVIES_KEY) || {}\n\n    if (favMovies[episodeId]){\n        delete favMovies[episodeId]\n    }else{\n        favMovies[episodeId]= true\n    }\n    storageService.saveToStorage(FAV_MOVIES_KEY, favMovies)\n    return favMovies\n}","import React,{useState,useEffect} from 'react'\nimport { MovieDetails } from '../components/MovieDetails'\nimport { MovieList } from '../components/MovieList'\nimport { movieService } from '../services/movie.service'\nimport { storageService } from '../services/storage.service'\n\nexport const MovieApp = () => {\n\n   const [movies, setMovies] = useState([])\n   const [currMovie, setCurrMovie] = useState(null)\n   const [favMovies, setFavMovies] = useState(null)\n   const [isNavOpen, setIsNavOpen] = useState(false)\n\n\n   useEffect(() => {\n       const loadMovies=async ()=>{\n            const movies = await movieService.getMovies()\n            setMovies(movies)\n            setCurrMovie(movies[0])\n            setFavMovies(storageService.loadFromStorage('favourites') || {})\n    }\n    loadMovies()\n\n   }, [])\n\n   const onSetCurrMovie=(movie)=>{\n        setCurrMovie(movie)\n        onToggleNav(false)\n   }\n\n   const onToggleFav=(e,episodeId)=>{\n    e.stopPropagation()\n    const favMovies=movieService.toggleFavMovie(episodeId)\n    setFavMovies(favMovies)\n   }\n\n   const onToggleNav=()=>{\n    setIsNavOpen(!isNavOpen)\n}\n\n    return (\n        <main className=\"movie-app\">\n            <div className=\"movie-content-container\">\n               \n                <MovieList isNavOpen={isNavOpen} onToggleFav={onToggleFav} movies={movies} onSetCurrMovie={onSetCurrMovie} favMovies={favMovies}/>\n                <MovieDetails movie={currMovie} onToggleNav={onToggleNav} isOpen={isNavOpen} exitScreen={setIsNavOpen}/>\n            </div>\n        </main>\n    )\n}\n","import './styles/style.scss';\n\nimport { MovieApp } from \"./pages/MovieApp\";\n\nexport const App=()=> {\n  return (\n     <MovieApp/>\n  );\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {App} from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}